
name: CI Ubuntu

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        include:
            - os: ubuntu-20.04
              compiler: clang++-10
            - os: ubuntu-20.04
              compiler: clang++-11
            - os: ubuntu-20.04
              compiler: clang++-12
            - os: ubuntu-20.04
              compiler: g++-10
              
            - os: ubuntu-22.04
              compiler: clang++-13
            - os: ubuntu-22.04
              compiler: clang++-14
            - os: ubuntu-22.04
              compiler: clang++-15
            - os: ubuntu-22.04
              compiler: g++-10
            - os: ubuntu-22.04
              compiler: g++-11
            - os: ubuntu-22.04
              compiler: g++-12
              
            - os: ubuntu-24.04
              compiler: clang++-16
            - os: ubuntu-24.04
              compiler: clang++-17
            - os: ubuntu-24.04
              compiler: clang++-18
            - os: ubuntu-24.04
              compiler: g++-12
            - os: ubuntu-24.04
              compiler: g++-13
            - os: ubuntu-24.04
              compiler: g++-14
    
    runs-on: ${{matrix.os}}
    env:
      cpp20modules_excludes: |
       '["g++-10", "g++-11", "g++-12", "g++-13", "g++-14",
        "clang++-10", "clang++-11", "clang++-12", "clang++-13",
        "clang++-14", "clang++-15", "clang++-16"]'

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install libraries
      run: sudo apt update && sudo apt install libgl-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev

    - name: Install Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.11.0

    - name: Loop over cpp_standards (11, 14, ...) and build_types (Debug, Release)
      run: |
        for cpp_standard in 11 14 17 20
        do
          for build_type in Debug Release
          do
            echo "================================================================================="
            echo "Building C++"$cpp_standard" in "$build_type" mode on "${{matrix.os}}" with "${{matrix.compiler}}
            echo "================================================================================="
            modules_flag=${{contains(fromJSON(env.cpp20modules_excludes), matrix.compiler) && 'OFF' || 'ON'}}
            cmake -B build/$cpp_standard/$build_type -GNinja              \
              -DVULKAN_HPP_SAMPLES_BUILD=ON                               \
              -DVULKAN_HPP_SAMPLES_BUILD_ONLY_DYNAMIC=ON                  \
              -DVULKAN_HPP_TESTS_BUILD=ON                                 \
              -DVULKAN_HPP_TESTS_BUILD_ONLY_DYNAMIC=ON                    \
              -DVULKAN_HPP_ENABLE_CPP20_MODULES=$modules_flag             \
              -DVULKAN_HPP_DISPATCH_LOADER_DYNAMIC=ON                     \
              -DVULKAN_HPP_BUILD_WITH_LOCAL_VULKAN_HPP=ON                 \
              -DVULKAN_HPP_PRECOMPILE=OFF                                 \
              -DVULKAN_HPP_RUN_GENERATOR=ON                               \
              -DCMAKE_CXX_COMPILER=${{matrix.compiler}}                   \
              -DCMAKE_CXX_STANDARD=$cpp_standard                          \
              -DCMAKE_BUILD_TYPE=$build_type
            cmake --build build/$cpp_standard/$build_type --parallel
          done
        done

    - name: Loop over build_types (Debug, Release) with cpp_standard 23 for compilers supporting that
      run: |
        # clang++17 gives in some strange errors in std::tuple!
        if [[ !${{contains(fromJSON('["g++-10", "clang++-10", "clang++-11", "clang++-17"]'), matrix.compiler)}} ]]
        then
          cpp_standard=23
          for build_type in Debug Release
          do
            echo "================================================================================="
            echo "Building C++"$cpp_standard" in "$build_type" mode on "${{matrix.os}}" with "${{matrix.compiler}}
            echo "================================================================================="
            modules_flag=${{contains(fromJSON(env.cpp20modules_excludes), matrix.compiler) && 'OFF' || 'ON'}}
            cmake -B build/$cpp_standard/$build_type -GNinja  \
              -DVULKAN_HPP_SAMPLES_BUILD=ON                   \
              -DVULKAN_HPP_SAMPLES_BUILD_ONLY_DYNAMIC=ON      \
              -DVULKAN_HPP_TESTS_BUILD=ON                     \
              -DVULKAN_HPP_TESTS_BUILD_ONLY_DYNAMIC=ON        \
              -DVULKAN_HPP_ENABLE_CPP20_MODULES=$modules_flag \
              -DVULKAN_HPP_DISPATCH_LOADER_DYNAMIC=ON         \
              -DVULKAN_HPP_BUILD_WITH_LOCAL_VULKAN_HPP=ON     \
              -DVULKAN_HPP_PRECOMPILE=OFF                     \
              -DVULKAN_HPP_RUN_GENERATOR=ON                   \
              -DCMAKE_CXX_COMPILER=${{matrix.compiler}}       \
              -DCMAKE_CXX_STANDARD=$cpp_standard              \
              -DCMAKE_BUILD_TYPE=$build_type
            cmake --build build/$cpp_standard/$build_type --parallel
          done
        fi

